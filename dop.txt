//timp1.cpp
#include "stdafx.h"
#include <iostream>
#include <cctype>
#include <cstdlib>
#include "timp.h"
#include <string>
Caesar::Caesar(int key) :k(key) {}
char Caesar::Shift(char sl)
{

	char alf[26] = { 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z' };
	int i = 0;
	for (i = 0; i < 26; i++)
	{
		
		if ((sl == alf[i])&((i + k) < 26))
		{
			sl = toupper(alf[i + k]);
			i = 26;
		}
		else if ((sl == alf[i])&((i + k) > 25))
		{
			sl = toupper(alf[i + k - 26]);
			i = 26;
		}
		else if (!(sl == alf[i]))
		{
			throw 2;
		}
	}
	return sl;
}
char Caesar::Shift1(char sl)
{
	char alf[26] = { 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z' };
	int i = 0;
	for (i = 0; i < 26; i++)
	{
		if ((sl == alf[i])&((i - k) >= 0))
		{

			sl = alf[i - k];
			i = 26;
		}
		if ((sl == alf[i])&((i - k) < 0))
		{
			sl = alf[i - k + 26];
			i = 26;
		}
	}
	return sl;
}
string Caesar::encode(const string s)
{
	string rez;
	for (int i = 0; i<s.size(); i++)
		rez += toupper(Shift(s[i]));
	return rez;
}
string Caesar::decode(const string s)
{
	string rez;
	for (int i = 0; i<s.size(); i++)
		rez += toupper(Shift1(s[i]));
	return rez;
}